#adicionar tolerancia aos itens se der tempo
#aumentar os elementos do hud
############### criterios do eric ####################
# desligar com Q
### caprichos ###
# suavizar a gravidade
# bracinho tacando a bola de fogo
# tolerancia pra pegar os itens


from turtle import *
import math 
import time
import random
from sys import exit
screen = Screen()
screen.setup(1400,800)
tracer(0, 0)

#desenhar a fase + formas gerais
def coracao(x,y,a=50,c1='red',c2='red'):
    color(c1,c2)
    up()
    goto(x,y)
    down()
    begin_fill()
    seth(0)
    left(45)
    forward(a)
    right(90)
    forward(a)
    right(90)
    forward(a)
    right(90)
    forward(a)
    end_fill()
    goto(x,y)
    begin_fill()
    seth(-45)
    circle(a/2)
    end_fill()
    begin_fill()
    goto(x,y)
    seth(0)
    left(45)
    forward(a)
    seth(-135)
    circle(a/2)
    end_fill()
def quadrado(lado=30):
    width(3)
    begin_fill()
    seth(0)
    for _ in range(4):
        forward(lado)
        right(90)

    end_fill()
def bloquinhos (x,y,n, lado=30):
    pensize(3)
    color("black","orange")
    up()
    goto(x,y)
    down()
    for _ in range(n):
        quadrado(lado)
        forward(lado)
    up()
def retangulo(x,y,l=20,h=40):
    seth(0)
    up()
    goto(x,y)
    down()
    begin_fill()
    forward(l)
    left(90)
    forward(h)
    left(90)
    forward(l)
    left(90)
    forward(h)
    end_fill()
    up()

def acrescenta_dict(dicio, y, x, n): #### processo pra arquivar as plataformas de maneira generalizada ####
    if y not in dicio:
        dicio[str(y)] = [x,n]
    elif type(dicio[str(y)]) == list:
        dicio[str(y)].append([x,n])
    #else:
    #    dicio[str(y)] = [dicio[str(y)], x]

#fase 1
def desenha_fase(fase=1):
    def desenha_arbusto(tamanho,x,y=0):
            pensize(1)
            up()
            goto(x,y)
            down()
            color('#4a781b','#4dce06')
            begin_fill()
            seth(0)
            forward(tamanho*5)
            left(120)
            forward(tamanho/2)
            seth(95)
            left(80)
            forward(tamanho/2)
            right(60)
            forward(tamanho-2)
            for _ in range(4):
                left(20)
                forward(tamanho/4)
            left(30)
            forward(tamanho*(3/4))
            right(120)
            forward(tamanho)
            for _ in range(4):
                left(20)
                forward(tamanho/4)
            left(30)
            forward(tamanho/2)
            left(30)
            forward(tamanho)
            left(10)
            forward(tamanho)
            end_fill()
            up()
            seth(0)
    def desenha_montanha(tamanho,x,y=0):
            pensize(1)
            up()
            goto(x,y)
            down()
            color('#662314','#ad580d')
            begin_fill()
            seth(0)
            forward(tamanho*5)
            left(120)
            forward(tamanho/2)
            seth(95)
            left(80)
            forward(tamanho/2)
            right(60)
            forward(tamanho-2)
            for _ in range(4):
                left(20)
                forward(tamanho/4)
            left(30)
            forward(tamanho*(3/4))
            right(120)
            forward(tamanho)
            for _ in range(4):
                left(20)
                forward(tamanho/4)
            left(30)
            forward(tamanho/2)
            left(30)
            forward(tamanho)
            left(10)
            forward(tamanho)
            end_fill()
            up()
            seth(0)
    def desenha_nuvem(tamanho,x,y):
            pensize(3)
            up()
            goto(x,y)
            down()
            color('#76cedd','white')
            begin_fill()
            seth(0)
            forward(tamanho*5)
            left(120)
            forward(tamanho/2)
            seth(95)
            left(80)
            forward(tamanho/2)
            right(60)
            forward(tamanho-2)
            for _ in range(4):
                left(20)
                forward(tamanho/4)
            left(30)
            forward(tamanho*(3/4))
            right(120)
            forward(tamanho)
            for _ in range(4):
                left(20)
                forward(tamanho/4)
            left(30)
            forward(tamanho/2)
            left(30)
            forward(tamanho)
            left(10)
            forward(tamanho)
            end_fill()
            up()
            seth(0)
    def cria_plataforma(x,y,n=5):
        bloquinhos(x,y,n)
        acrescenta_dict(plataformas,y,x,n)

    if fase=='menu':
        bgcolor='#76cedd'
        write('menu inicial - aperte P para começar!')
        plataformas={}
        projeteis=[]
    
    if fase == 1:
        
        #céu
        color('#76cedd','#76cedd')
        retangulo(-600,0,1200,500)

        #nuvens
        desenha_nuvem(10,-200,200)    
        desenha_nuvem(30,200,60)
        desenha_nuvem(40,-300,70)
        desenha_nuvem(20,400,100)
        desenha_nuvem(10,200,250)  
        desenha_nuvem(10,50,300)
        desenha_nuvem(5,50,400)
        desenha_nuvem(5,220,350)
        desenha_nuvem(5,-220,350)
        desenha_nuvem(7,-320,300)
        desenha_nuvem(5,-420,250)
        
          

        #arbustos
        desenha_arbusto(10,-400)
        desenha_arbusto(8,-40)
        desenha_arbusto(10,200)
        desenha_arbusto(8,370)

        #florzinha (powerup)
        if florzinha['vivo']==True:
            color('green','green')
            retangulo(-227,300,4,10)
            retangulo(-230,304,3,1)
            retangulo(-224,307,4,1)
            up()
            goto(-235,320)
            down()
            begin_fill()
            color('orange','orange')
            circle(10)
            end_fill()
            up()
            goto(-232,320)
            down()
            begin_fill()
            color('yellow','yellow')
            circle(7)
            end_fill()
            up()
            goto(-229,320)
            down()
            begin_fill()
            color('white','white')
            circle(4)
            end_fill()
        
        #chave
        if chave['vivo']==True:
            color('black','grey')
            retangulo(325,275,20,3)
            retangulo(319,272,6,8)
            color('black','#76cedd')
            retangulo(321,274,2,4)
            color('black','grey')
            retangulo(337,273,5,2)


        #plataformas
        cria_plataforma(-600,0,40) #chão
        cria_plataforma(-200,110,1)
        cria_plataforma(50,100)
        cria_plataforma(110,200,1)
        cria_plataforma(-50,250,2)
        cria_plataforma(-300,300)
        cria_plataforma(250,260)
        
        #
        #chão
        color('#ad580d','#ad580d')
        retangulo(-600,-300,1200,300,)
        color('#112F05','green')
        retangulo(-600,-30,1200,30)
        #
        #bordas
        color('black','black')
        retangulo(-1000,-500,500,1000)
        retangulo(500,-500,500,1000)
        retangulo(-500,-500,1000,300)

    if fase ==2:
        #ceu
        color('#76cedd','#76cedd')
        retangulo(-600,0,1200,500)
        cria_plataforma(-600,0,40)


        #nuvens
        desenha_nuvem(10,-300,200)    
        desenha_nuvem(30,100,60)
        desenha_nuvem(40,-400,70)
        desenha_nuvem(20,300,100)
        desenha_nuvem(10,100,250)  
        desenha_nuvem(10,-50,300)
        desenha_nuvem(5,-50,400)
        desenha_nuvem(5,120,350)
        desenha_nuvem(5,-320,350)
        desenha_nuvem(7,-420,300)
        desenha_nuvem(5,-520,250)
        desenha_nuvem(50,340,200)
        desenha_nuvem(40,240,100)
        
        #montanhas
        desenha_montanha(40,400)
        desenha_montanha(20,250)
        desenha_montanha(11,130)
        desenha_montanha(10,100)
        desenha_montanha(5,0)
          

        #arbustos
        desenha_arbusto(10,-400)
        desenha_arbusto(8,-40)
        desenha_arbusto(10,200)
        desenha_arbusto(8,370)
         #castelo
        color('black','grey')
        retangulo(450,0,200,400)
        cria_plataforma(350,250,5)
        porta='#C6A579'
        if fase2['clear']==True:
            porta = 'black'
        color('black',porta)
        retangulo(475,250,100,50)
        color('black','grey')
        pensize(0)
        retangulo(350,220,200,30)
        #chao
        color('#ad580d','#ad580d')
        retangulo(-600,-300,1200,300,)
        color('#112F05','green')
        retangulo(-600,-30,1200,30)
       
        #plataformas
        cria_plataforma(-340,100,2)
        cria_plataforma(-165,200,2)
        cria_plataforma(55,210,3)

        #bordas
        color('black','black')
        retangulo(-1000,-500,500,1000)
        retangulo(500,-500,500,1000)
        retangulo(-500,-500,1000,300)
        

############## ESTRUTURA DE DADOS  ###########  


jogador = {
    'x': -450,
    'y': 0,
    'lado': 'direita',
    'animacao': None,
    'counter': 0,
    'plataforma': True,
    'correndo': 2, #alternar entre 2 e 3 pra multiplar o step
    'powerup':False,
    'vidas':3,
    'protection':False, #protecao logo apos tomar um hit de um inimigo
    'protection_counter':0,
    'contador_fogo':0,
    'barreira_d':False,
    'barreira_e':False,
}

projeteis=[]
plataformas = {}
fase=2
fase1={'clear':False,'powerup':True, 'chave':True}
fase2={
    'clear':False
}
# decida aqui o que guardar para cada inimigo
goomba1 = {
    'step':5,
    'vivo':True,
    'x':400,
    'y':0,
    'lado':'esquerda',
    'largura':20, # para fins de hitbox
    'altura':20,
}
goomba2 = {
    'step':3,
    'vivo':True,
    'x':400,
    'y':0,
    'lado':'esquerda',
    'largura':20, 
    'altura':20,
}
inimigos1 = [goomba1,goomba2]
guardiao1 = {
    'x':400,
    'y':0,
    'step':1,
    'lado':'esquerda',
    'largura':50,
    'altura':40,
    'vivo':True,
    'velocidade':0.5
}
guardiao3 = {
    'x':400,
    'y':0,
    'step':1,
    'lado':'esquerda',
    'largura':30,
    'altura':60,
    'vivo':True,
    'velocidade':0.7
}
guardiao4 = {
    'x':400,
    'y':0,
    'step':1,
    'lado':'esquerda',
    'largura':20,
    'altura':20,
    'vivo':True,
    'velocidade':1
}
guardiao2 = {
    'x':400,
    'y':0,
    'step':1,
    'lado':'esquerda',
    'largura':30,
    'altura':20,
    'vivo':True,
    'velocidade':1
}
guardiao5 = {
    'x':400,
    'y':0,
    'step':1,
    'lado':'esquerda',
    'largura':20,
    'altura':20,
    'vivo':True,
    'velocidade':2
}
inimigos2 = [guardiao1, guardiao2,guardiao3, guardiao4, guardiao5]
florzinha={
    'x': -225,
    'y': 300,
    'vivo':True,
    'largura':20,
    'altura':30,
}
chave={
    'x': 325,
    'y': 260,
    'vivo':True,
    'largura':30,
    'altura':20,
}
itens1 = [florzinha,chave]




######################################################
############### COLISAO COM OS INIMIGOS ###############
def encosta_inimigo(ini):     #qnd atingido por um inimigo, o jogador entra em estado de protecao por um tempo ate poder ter vida reduzida novamente
    cont=jogador['protection_counter']
    if cont>0:
        jogador['protection_counter']-=1
    if jogador['protection_counter'] == 0:
        jogador['protection']=False
    if ini['vivo']==True and jogador['protection']==False:
        if ini['y']-38 < jogador['y'] < ini['y']+ini['altura']:
            if ini['x']-18 < jogador['x'] < ini['x']+ini['largura']:
                jogador['vidas']-=1
                jogador['protection_counter']=60
                jogador['protection']=True
    
############# colisao com itens
def encosta_item(item):
    if item['x'] < jogador['x'] <=item['x']+item['largura'] and item['y']<=jogador['y'] <= item['y']:
        item['vivo']=False

############ BOLA DE FOGO ################
def bola_de_fogo():
    if jogador['contador_fogo']==0 and florzinha['vivo']==False:
        projeteis.append({'x':jogador['x'],'y':jogador['y'],'lado':jogador['lado'],'contador':20})
        jogador['contador_fogo']=10
def encosta_fogo(ini):
    if ini['vivo']==True:
        for proj in projeteis:
                if proj['contador']>0:
                    if ini['x']<= proj['x'] <= ini['x']+ini['largura'] and ini['y']<=proj['y'] <= ini['y']+ini['altura']:
                        proj['contador']=0
                        ini['vivo']=False




############## ROTINAS GRAFICAS ###########
########### HUD #################
def desenha_vida():
    
    if jogador['vidas']>0:
        for v in range(jogador['vidas']):
            x,y=-400+v*150,-300
            coracao(x,y)
def desenha_hud():
    desenha_vida()
#################################

def desenha_projeteis():
    for projetil in projeteis:
        if projetil['lado']=='direita' and projetil['contador']>0:
            begin_fill()
            color('red','orange')
            retangulo(projetil['x'],projetil['y']+5,10,10)
            end_fill()
        if projetil['lado']=='esquerda' and projetil['contador']>0:
            begin_fill()
            color('red','orange')
            retangulo(projetil['x'],projetil['y']+5,10,10)
            end_fill()

def desenha_jogador(jogador): #o bonequinho é de 18x38
    jogador_gravidade(jogador)  
    pensize(0)
    if jogador['animacao'] == 'pulando':
        jogador_pulando(jogador)
    #########

    x, y = jogador['x'], jogador['y']
    up()
    goto(x, y)
    down()

    avental1, avental2 = 'blue','blue'
    camiseta1,camiseta2 = 'red','red'
    chapeu1,chapeu2 = 'red','red'
    chapeu3,chapeu4 = 'white','yellow'
    if florzinha['vivo']==False:
        avental1,avental2 = 'orange','red'
        camiseta1,camiseta2 = 'orange','white'
        chapeu1,chapeu2= 'orange','white'
        chapeu3,chapeu4 = 'red','red'
    
    #corpinho
    color(avental1,avental2)  #uniforme muda se ele tem poder ou nao
    retangulo(x,y+10,15,15)
    end_fill() 
    #perninhas
    retangulo(x,y,5,10)
    retangulo(x+10,y,5,10)
    #sapatinho
    color('black','#64281B')
    retangulo(x,y,8,3)
    retangulo(x+10,y,8,3)
    #camiseta
    color(camiseta1,camiseta2)
    retangulo(x+6,y+20,7,5)
    retangulo(x-1,y+17,3,8)
    #botõezinhos
    color('yellow','yellow')
    retangulo(x+5,y+15,1,1)
    retangulo(x+13,y+15,1,1)
    #mãozinha
    color('grey','white')
    retangulo(x-1,y+14,3,3)
    #cabeça 
    color('#F3BEB3','#F3BEB3')
    retangulo(x+1,y+25,12,12)
    #cabelo #301E1A
    color('#301E1A','#301E1A')
    retangulo(x,y+27,3,11)
    retangulo(x,y+34,14,4)
    #olhos
    color('black','black')
    retangulo(x+7,y+31,1,1)
    retangulo(x+11,y+31,1,1)
    #bigode msm cor dos olhos
    retangulo(x+7, y+27,2,2)
    retangulo(x+5, y+27,9,1)
    #chapeu
    color(chapeu1, chapeu2)
    retangulo(x-1,y+35,16,3)
    color(chapeu3,chapeu4)
    retangulo(x+10,y+36,1,1)
def jogador_pulando(jogador):
    N = 6
    count = jogador['counter']
    if count >= N:
        jogador['counter'] = 0 #usar o counter pra parar a queda em obstáculos
        jogador['animacao'] = False
        return
    if count < N:
        jogador['plataforma']=False
        jogador['counter'] += 1
        jogador['y'] +=20
    else:
      # jogador['y'] -= 4
        jogador['counter'] += 1

################### GRAVIDADE ################# 
#o pulo e a gravidade aumentam 1p 20 vezes e 10p de uma vez; por isso os elementos de colisao devem ser dispostos em intervalos de 10x
def jogador_gravidade(jogador):
    global plataformas
    if jogador['plataforma']==False and jogador['animacao']== False:
        jogador['y']-= 10
    if jogador['y']<0:
        jogador['y']=0
        jogador['plataforma']=True
    ver_plataforma()
def ver_plataforma(): ##### avalia de maneira generica onde tem plataforma e altera o parametro 'plataforma' de acordo com isso
    for y, plat in plataformas.items(): 
        if int(plat[0])>0:
            if jogador['y'] == int(y) and int(plat[0])+int(plat[1])*30 >= jogador['x'] >= int(plat[0]-18):
               jogador['plataforma']=True
            elif jogador['y'] == int(y) and jogador['x'] not in (int(plat[0]-18),int(plat[0])+int(plat[1])*30):
                jogador['plataforma']=False
        if int(plat[0])<0:
            if jogador['y'] == int(y) and int(plat[0]-18) <= jogador['x'] <= int(plat[0])+int(plat[1]*30):
                jogador['plataforma']=True  
            elif jogador['y'] == int(y) and  jogador['x'] not in (int(plat[0]-18),int(plat[0])+int(plat[1]*30)):
                jogador['plataforma']=False
##############################################


# -> substitua o codigo abaixo 
def desenha_inimigos(fase):
    # desenha inimigos1
    if fase==1:
        for ini in inimigos1:
            if ini['vivo']==True:
                anima_inimigo1(ini)
                color('black','#7F3626')
                retangulo(ini['x'],ini['y'],20,20)
    if fase ==2:
        for ini in inimigos2:
            if ini['vivo']==True:
                olho='white'
                if ini['step']==2:
                    olho='red'
                color('black','purple')
                pensize(0)
                retangulo(ini['x'],ini['y']+4,ini['largura'],ini['altura']-4)
                retangulo(ini['x'],ini['y'],3,4)
                retangulo(ini['x']+ini['largura']-3,ini['y'],3,4)
                pensize(2)
                color('black',olho)
                retangulo(ini['x']+ini['largura']/4,ini['altura']/2,ini['largura']/2,ini['largura']/2)
                color('black','black')
                if ini['lado']=='esquerda':
                    retangulo(ini['x']+ini['largura']/4,5*ini['altura']/9,ini['largura']/4,ini['largura']/4)
                else:
                    retangulo(ini['x']+2*ini['largura']/4,5*ini['altura']/9,ini['largura']/4,ini['largura']/4)

    pass

def desenha_jogo(): 
    global jogador
    reset()
    hideturtle()
    desenha_fase(fase)
    if fase != 'menu':
        desenha_jogador(jogador)
        desenha_inimigos(fase)
        desenha_hud()
    desenha_projeteis()
    
    update()



########### MOVIMENTAÇÃO E TECLAS DO JOGADOR #############
teclas={'direita':False,'esquerda':False}
def movimentacao():
    barreira_jogador() ### limites da fase para o jogador (varia de acordo com a fase e seu estagio)
    step=5*jogador['correndo']
    def anda(step):
        jogador['x'] += step    

    def direita():
        jogador['lado'] = 'direita'
        if jogador['barreira_d']==False:
            anda(step)
        
    def esquerda():
        jogador['lado'] = 'esquerda'
        if jogador['barreira_e']==False:
            anda(step*(-1))

    def pula():
        if jogador['plataforma']==True:
            jogador['animacao'] = 'pulando' 

    if teclas['direita']==True and teclas['esquerda']==False:
        direita()
    if teclas['esquerda']==True and teclas['direita']==False:
        esquerda()
    def cancela_d():
        teclas['direita']=False
    def cancela_e():
        teclas['esquerda']=False
    def ativa_d():
        teclas['direita']=True
    def ativa_e():
        teclas['esquerda']=True
    def correr():
        if jogador['animacao']==False:
            jogador['correndo']=3
    def andar():
        if jogador['animacao']==False:
            jogador['correndo']=2
    def cair():
        jogador['plataforma']=False
    def iniciar():
        global fase
        if fase=='menu':
            fase=1
    def parar():
        global fase
        if fase == 'menu':
            quit(1)
        else: 
            fase = 'menu'
        
    def cheat(): ## funcao dev pra testar as coisas mais facilmente ## ta bindada à tecla 'd'
        jogador['correndo']=3
        florzinha['vivo']=False
        chave['vivo']=False
    screen.onkey(cancela_d,'Right')
    screen.onkey(cancela_e,'Left')
    screen.onkeypress(ativa_d, "Right")
    screen.onkeypress(ativa_e, "Left")
    screen.onkeypress(pula, "Up")
    screen.onkeypress(correr,'Shift_L')
    screen.onkey(andar,'Shift_L')
    screen.onkeypress(cair,'Down')
    screen.onkeypress(iniciar,'p')
    screen.onkeypress(parar,'q')
    screen.onkeypress(bola_de_fogo,'space')
    screen.onkeypress(cheat,'d')
    screen.listen()
    
############## LOGICA DE ANIMACAO #######################

# -> substitua o codigo abaixo 
def anima_inimigo1(ini):
    barreiras_inimigos()
    if ini['lado']=='esquerda':  
        ini['x']-=ini['step']
    if ini['lado']=='direita':  
        ini['x']+=ini['step']
def anima_inimigo2(ini):
    barreiras_inimigos()
    if ini['lado']=='esquerda':  
        ini['x']-=5*ini['step']*ini['velocidade']
    if ini['lado']=='direita':  
        ini['x']+=5*ini['step']*ini['velocidade']
    #add pulo
    

    
def barreiras_inimigos():
    for ini in inimigos1:
        if ini['lado']=='esquerda': #borda esquerda
            if ini['x']<-500:
                ini['lado']='direita'
        if ini['lado']=='direita': #borda esquerda
            if ini['x']>500-ini['largura']:
                ini['lado']='esquerda'

     ############           
    for ini in inimigos2:
        if ini['lado']=='esquerda': #borda esquerda
            if ini['x']<-500:
                ini['lado']='direita'
        if ini['lado']=='direita': #borda esquerda
            if ini['x']>450-ini['largura']:
                ini['lado']='esquerda'

        if jogador['y']-ini['y']<150:
            if ini['x']+150 >= jogador['x']>=ini['x']-150:
                if jogador['x']>ini['x']:
                    ini['lado'] = 'direita'
                else:
                    ini['lado']='esquerda'
                ini['step']=2
            else:
                ini['step']=1
        else:
            ini['step']=1
        


def barreira_jogador(): #limites espaciais do jogador e mudancas de fase
    global fase
    global projeteis
    global plataformas
    if fase==1:
        if jogador['x']<=-496:
            jogador['barreira_e']=True
        if jogador['x']>-496:
            jogador['barreira_e']=False
        #progredir para a fase2
        if jogador['x']>=471:
            if fase1['clear']==False:
                jogador['barreira_d']=True
        if jogador['x']<471:
            jogador['barreira_d']=False
        if fase1['clear']==True and jogador['x']>471: #trocar de fase
            fase=2
            jogador['x']=-400
            projeteis={}
            plataformas={}
    if fase ==2:
        if jogador['x']<=-496:
            jogador['barreira_e']=True
            jogador['barreira_d']=False
        if jogador['x']>-460:
            jogador['barreira_e']=False
        if jogador['x']>460 and jogador['y']<248: #350
            jogador['barreira_d']=True
        if jogador['x']>460 and jogador['y']>248:
            if fase2['clear']==True:
                jogador['barreira_d']=False
                jogador['x']=-400
                projeteis=[]
                plataformas={}
                fase=3        
            else:
                jogador['barreira_d']=True
        if jogador['x']<460:
            jogador['barreira_d']=False   
            


def anima_todos_inimigos(): #verifica a colisao tanto de ini quanto de items
    if fase==1:
        for ini in inimigos1:
            encosta_fogo(ini)
            anima_inimigo1(ini)
            encosta_inimigo(ini)
        for item in itens1:
            encosta_item(item)
    if florzinha['vivo'] == True or chave['vivo']==True or goomba1['vivo']==True or goomba2['vivo']==True:
        fase1['clear']=False
    else:
        fase1['clear']=True

        ###############
    if fase==2:
        for ini in inimigos2:
            encosta_fogo(ini)
            encosta_inimigo(ini)
            anima_inimigo2(ini)
    if guardiao1['vivo']==False and guardiao2['vivo']==False and guardiao3['vivo']==False and guardiao4['vivo']==False and guardiao5['vivo']==False:
        fase2['clear']=True

def anima_projeteis():
    if jogador['contador_fogo']>0:
        jogador['contador_fogo']-=1
    for projetil in projeteis:
        if projetil['lado']=='direita' and projetil['contador']>0:
            up()
            goto(projetil['x'],projetil['y'])
            seth(0)
            down()
            begin_fill()
            color('red','orange')
            pensize(4)
            circle(5)
            retangulo(projetil['x'],projetil['y'])
            end_fill()
            projetil['x']+=20
            projetil['contador']-=1
        if projetil['lado']=='esquerda' and projetil['contador']>0:
            up()
            goto(projetil['x']-5,projetil['y'])  # ATENCAO AO OFFSET NA ESQUERDA
            seth(0)
            down()
            begin_fill()
            color('red','orange')
            pensize(4)
            circle(5)
            retangulo(projetil['x'],projetil['y'])
            end_fill()
            projetil['x']-=20
            projetil['contador']-=1
        if projetil['contador']==0:
            del projetil #ainda nao consigo deletar os projeteis - mas isso n importa (era mais pra melhorar performance do jogo)


############### LOOP PRINCIPAL ###############


for i in range(3000):
    anima_todos_inimigos()
    anima_projeteis()
    desenha_jogo()
    desenha_hud()
    movimentacao()    
    time.sleep(0.01)
    print(jogador)
